// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// double_me
int double_me(int x);
RcppExport SEXP _sousmarin_double_me(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(double_me(x));
    return rcpp_result_gen;
END_RCPP
}
// say_hello
void say_hello(int x);
RcppExport SEXP _sousmarin_say_hello(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    say_hello(x);
    return R_NilValue;
END_RCPP
}
// test_threads
void test_threads();
RcppExport SEXP _sousmarin_test_threads() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_threads();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sousmarin_double_me", (DL_FUNC) &_sousmarin_double_me, 1},
    {"_sousmarin_say_hello", (DL_FUNC) &_sousmarin_say_hello, 1},
    {"_sousmarin_test_threads", (DL_FUNC) &_sousmarin_test_threads, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_sousmarin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
